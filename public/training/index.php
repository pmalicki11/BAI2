<?php

abstract class FileData {

	private $filePath = null;

	protected $data = [];

	protected $fillable = false; //deklaracja wlasnej tablicy z dozwolonymi elementami

	public function __construct( $filePath ) {
		if ( ! file_exists( $filePath ) ) {
			$dir = dirname( $filePath );
			if ( ! file_exists( $dir ) ) {
				mkdir( $dir, 0755, true ); // 0755 -> prawa dostepu unix
			}
			touch( $filePath );
		}
		$this->filePath = $filePath;

		$this->data = @unserialize( file_get_contents( $this->filePath ) )
			?: []; // short if - jesli wynik funkcji !== false to przypisze wynik lub pusta tablice

	}

	public static function fileExists( $filePath ) {
		return file_exists( $filePath );
	}

	public function __set( $varname, $value ) {
		if ( $this->fillable === false || ( is_array( $this->fillable ) && in_array( $varname, $this->fillable ) ) ) {
			$this->data[ $varname ] = $value;
		} else {
			throw new Exception( "Pole {$varname} niedozwolone!!" );
		}
	}

	public function __get( $varname ) {
		return isset( $this->data[ $varname ] ) ? $this->data[ $varname ] : null;
	}

	public function save() {
		return file_put_contents( $this->filePath, serialize( $this->data ) );
	}
}

/**
 * Class User
 * @property string $name
 * @property string $surname
 *
 */
class User extends FileData { //dziedziczy po filedata
	protected $fillable = [
		"name",
		"surname",
		"email",
		"password",
	]; // przeciaza pola dozwolone ktore moga byc ustawione jak publiczne atrybuty

	public function __construct( $userName ) { // ustawienie w jakim pliku przechowujemy dane
		parent::__construct( "data/users/{$userName}.dat" );
	}

	public static function userExists( $userName ) {
		return parent::fileExists( "data/users/{$userName}.dat" ); // TODO: Change the autogenerated stub
	}

	public function __set( $varname, $value
	) { // przeciazenie settera magicznego tak aby dla wyjatkowej sytuacji pola email dokonal walidacji
		switch ( $varname ) {
			case 'email':
				if ( ! filter_var( $value, FILTER_VALIDATE_EMAIL ) ) { // walidacja adresu email
					throw new Exception( "Not a valid email" );
				}
				break;
		}
		parent::__set( $varname, $value ); // wywowlanie funkcji nadrzednej jesli nie wystapi wyjatek aby sie wykonal setter
	}
}

class UserProfile extends FileData {
	protected $fillable = [ "gender", "phone" ];

	public function __construct( $userName ) {
		parent::__construct( "data/users/{$userName}_profile.dat" );
	}
}

class Common {
	protected function getFromPost( $varname ) {
		return isset( $_POST[ $varname ] ) ? $_POST[ $varname ] : null;
	}
}

class UserRegister extends Common {
	/**
	 * zakladam ze w post mam uzytkownika w postaci tablicy -> name, surname, email, password, passwordRepeat
	 */
	public function register() {
		if ( ! isset( $_POST ) ) {
			throw new Exception( "No data in post" );
		}
		if ( is_null( $this->getFromPost( 'password' ) ) || ( $this->getFromPost( 'password' ) !== $this->getFromPost( 'passwordRepeat' ) ) ) {
			throw new Exception( "Password mismatch" );
		}
		$emailMd5 = md5( $this->getFromPost( 'email' ) );

		$user           = new User( $emailMd5 );
		$user->name     = $this->getFromPost( 'name' );
		$user->surname  = $this->getFromPost( 'surname' );
		$user->email    = $this->getFromPost( 'email' );
		$user->password = sha1( $this->getFromPost( 'password' ) );
		$user->save();
	}

}

class UserLogin extends Common {
	public function login() {
		$emailMd5 = md5( $this->getFromPost( 'email' ) );
		if ( ! User::userExists( $emailMd5 ) ) {
			throw new Exception( "user do not exists" );
		}
		$emailMd5 = md5( $this->getFromPost( 'email' ) );
		$u        = new User( $emailMd5 );
		if ( $u->password == sha1( $this->getFromPost( 'password' ) ) ) {
			return true;
		} else {
			throw new Exception( "Wrong password" );
		}
	}

}

//-------------------
$userInstance = new User( 'acichowicz' ); // inicjalizacja obiektu user i ustawienie nazwy uzytkownika ktora bedzie nazwa pliku

$userInstance->name    = "Aleksander"; // ustawienie atrybutu, ktory nie istnieje powoduje wywolanie funkcji __set()
$userInstance->surname = "Cichowicz";
$userInstance->email   = 'olek@cichowicz.eu';
$userInstance->save(); // wywolanie funkcji zapisujacej, ktora zapisze do pliku
var_dump( $userInstance );

$userProfile         = new UserProfile( 'acichowicz' );
$userProfile->gender = 'm';
$userProfile->save();

$_POST = [
	"email"          => "olek@cichowicz.eu",
	"name"           => 'Aleksander',
	"surname"        => "Cichowicz",
	"password"       => "test",
	"passwordRepeat" => "test",
];

$ur = new UserRegister();
$ur->register();

$_POST = [
	"email"    => "olek@cichowicz.eu",
	"password" => "test1",
];

try {
	$ul = new UserLogin();
	$ul->login();
} catch ( Exception $e ) {
	echo "Nie mozna sie zalogowac: {$e->getMessage()}";
}



